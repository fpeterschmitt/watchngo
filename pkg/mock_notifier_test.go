// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go

// Package pkg_test is a generated GoMock package.
package pkg_test

import (
	reflect "reflect"

	pkg "github.com/Leryan/watchngo/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNotifier) Add(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockNotifierMockRecorder) Add(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNotifier)(nil).Add), file)
}

// Close mocks base method.
func (m *MockNotifier) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNotifierMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNotifier)(nil).Close))
}

// Events mocks base method.
func (m *MockNotifier) Events() <-chan pkg.NotificationEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(<-chan pkg.NotificationEvent)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockNotifierMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockNotifier)(nil).Events))
}

// Remove mocks base method.
func (m *MockNotifier) Remove(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockNotifierMockRecorder) Remove(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockNotifier)(nil).Remove), file)
}
